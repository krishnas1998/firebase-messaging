const request = require('../util/request');
const validator = require('../util/validator')

const FCM_SEND_HOST = 'fcm.googleapis.com';
const FCM_TOPIC_MANAGEMENT_HOST = 'iid.googleapis.com';
const FCM_TOPIC_MANAGEMENT_ADD_PATH = '/iid/v1:batchAdd';
const FCM_TOPIC_MANAGEMENT_REMOVE_PATH = '/iid/v1:batchRemove';
const MESSAGING_HTTP_METHOD = 'POST';


function getUrlPath(projectId) {
  return `/v1/projects/${projectId}/messages:send`
}

/**
 * Sends the given message via FCM.
 *
 * @param projectId - projectId assigned in firebase
 * @param accessToken - Access token generated by google jwt.
 * @param message - The message payload.
 * @param dryRun - Whether to send the message in the dry-run
 *   (validation only) mode.
 * @returns A promise fulfilled with a unique message ID
 *   string after the message has been successfully handed off to the FCM
 *   service for delivery.
 */
function send(projectId, accessToken, message, dryRun) {
  const urlPath = getUrlPath(projectId);
  const url = `https://${FCM_SEND_HOST}${urlPath}`;
  const data = { message };
  if (dryRun) {
    data.validate_only = true;
  }
  return request.sendRequestForSendResponse(url, MESSAGING_HTTP_METHOD, accessToken, data);
}

/**
* Sends each message in the given array via Firebase Cloud Messaging.
*
* The responses list obtained from the return value corresponds to the order of `messages`.
* An error from this method or a `BatchResponse` with all failures indicates a total failure,
* meaning that none of the messages in the list could be sent. Partial failures or no
* failures are only indicated by a `BatchResponse` return value.
*
* @param projectId - projectId assigned in firebase
* @param accessToken - Access token generated by google jwt.
* @param messages - A non-empty array
*   containing up to 500 messages.
* @param dryRun - Whether to send the messages in the dry-run
*   (validation only) mode.
* @returns A Promise fulfilled with an object representing the result of the
*   send operation.
*/
function sendEach(projectId, accessToken, messages, dryRun) {
  const urlPath = getUrlPath(projectId);
  const url = `https://${FCM_SEND_HOST}${urlPath}`;
  const requests = messages.map((message) => {
    const data = { message };
    if (dryRun) {
      data.validate_only = true;
    }
    return request.sendRequestForSendResponse(url, MESSAGING_HTTP_METHOD, accessToken, data);
  });
  
  return Promise.all(requests)
    .then((responses) => {
      const successCount = responses.filter((resp) => resp.success).length;
      const failureCount = responses.length - successCount;
      return {
        responses,
        successCount,
        failureCount,
      };
    })
    .catch((error) => {
      console.error('Error sending FCM messages:', error);
      // If an error occurs while sending messages, return an empty response array
      return {
        responses: [],
        successCount: 0,
        failureCount: messages.length,
      };
    });
}

/**
 * Sends the given multicast message to all the FCM registration tokens
 * specified in it.
 *
 * This method uses the {@link sendEach} API under the hood to send the given
 * message to all the target recipients. The responses list obtained from the
 * return value corresponds to the order of tokens in the `MulticastMessage`.
 * An error from this method or a `BatchResponse` with all failures indicates a total
 * failure, meaning that the messages in the list could be sent. Partial failures or
 * failures are only indicated by a `BatchResponse` return value.
 *
 * @param projectId - projectId assigned in firebase
 * @param accessToken - Access token generated by google jwt.
 * @param message - A multicast message
 *   containing up to 500 tokens.
 * @param dryRun - Whether to send the message in the dry-run
 *   (validation only) mode.
 * @returns A Promise fulfilled with an object representing the result of the
 *   send operation.
 */
function sendEachForMulticast(projectId, accessToken, message, dryRun) {
  const messages = message.tokens.map((token) => {
    return {
      token,
      android: message.android,
      apns: message.apns,
      data: message.data,
      notification: message.notification,
      webpush: message.webpush,
      fcmOptions: message.fcmOptions,
    };
  });
  return sendEach(projectId, accessToken, messages, dryRun);
}

/**
 * Helper method which sends and handles topic subscription management requests.
 * @param accessToken - Access token generated by google jwt.
 * @param registrationTokenOrTokens - The registration token or an array of
 *     registration tokens to unsubscribe from the topic.
 * @param topic - The topic to which to subscribe.
 * @param path - The endpoint path to use for the request.
 *
 * @returns A Promise fulfilled with the parsed server
 *   response.
 */
function sendTopicManagementRequest(accessToken, registrationTokenOrTokens, topic, path) {
  let registrationTokensArray = registrationTokenOrTokens;
  if(validator.isString(registrationTokenOrTokens)) {
    registrationTokensArray = [registrationTokenOrTokens];
  }
  const data = {
    to: topic,
    registration_tokens: registrationTokensArray,
  };
  const url = `https://${FCM_TOPIC_MANAGEMENT_HOST}${path}`;
  return request.sendRequest(url, MESSAGING_HTTP_METHOD, accessToken, data);
}

/**
 * Subscribes a device to an FCM topic.
 *
 * See {@link https://firebase.google.com/docs/cloud-messaging/manage-topics#suscribe_and_unsubscribe_using_the |
* Subscribe to a topic}
* for code samples and detailed documentation. Optionally, you can provide an
* array of tokens to subscribe multiple devices.
*
* @param accessToken - Access token generated by google jwt.
* @param registrationTokenOrTokens - A token or array of registration tokens
*   for the devices to subscribe to the topic.
* @param topic - The topic to which to subscribe.
*
* @returns A promise fulfilled with the server's response after the device has been
*   subscribed to the topic.
*/
function subscribeToTopic(accessToken, registrationTokenOrTokens, topic) {
  const path = FCM_TOPIC_MANAGEMENT_ADD_PATH;
  return sendTopicManagementRequest(accessToken, registrationTokenOrTokens, topic, path);
}

/**
* Unsubscribes a device from an FCM topic.
*
* See {@link https://firebase.google.com/docs/cloud-messaging/admin/manage-topic-subscriptions#unsubscribe_from_a_topic |
* Unsubscribe from a topic}
* for code samples and detailed documentation.  Optionally, you can provide an
* array of tokens to unsubscribe multiple devices.
*
* @param accessToken - Access token generated by google jwt.
* @param registrationTokens - A device registration token or an array of
*   device registration tokens to unsubscribe from the topic.
* @param topic - The topic from which to unsubscribe.
*
* @returns A promise fulfilled with the server's response after the device has been
*   unsubscribed from the topic.
*/
function unsubscribeFromTopic(accessToken, registrationTokenOrTokens, topic) {
  const path = FCM_TOPIC_MANAGEMENT_REMOVE_PATH;
  return sendTopicManagementRequest(accessToken, registrationTokenOrTokens, topic, path);

}

module.exports = {
  subscribeToTopic,
  unsubscribeFromTopic,
  send,
  sendEachForMulticast,
  sendEach,
}